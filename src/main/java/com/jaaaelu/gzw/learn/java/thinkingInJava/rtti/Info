第十四章 类型信息

1.运行时类型信息使得你可以在程序运行时发现和使用类型信息。它使你从只能在编译器执行面向类型的操作的禁锢中解脱了出来。
2.面向对象编程中最基本的目的是：让代码值操纵对基类的引用。这样，如果要添加一个新类来扩展程序，就不会影响原来的代码。
3.RTTI 的含义：在运行时，识别一个对象的类型。
4.基类对象实际执行什么样的代码，是由引用说指向的具体子类而决定的。通常，也真是这样求的；你希望大部分代码尽可能少的了解对象具体类型，而是只与
对象家族中一个通用表示打交道。这样代码会更容易写，更容易读，且更便于维护；设计也更容易实现、理解和改变。
5.要理解 RTTI 在 Java 中的工作原理，首先必须知道类型信息在运行时是如何表示的。这项工作是由称为 CLass 对象的特殊对象完成的，它包含了与类相
关的信息。每个类都有一个 Class 对象。换言之，每当编写并且编译了一个新类，就会产生一个 Class 对象（更恰当地说，是被保存在一个同名的 .class
文件中）。为了生成这个类对象，运行这个程序的 Java 虚拟机将使用被称为"类加载器"的子系统。
6.所有类都是在对其第一次使用时，动态加载到 JVM 中的。但程序创建第一个对类的静态成员的引用时，就会加载这个类。这个证明构造器也是类的静态方法，
即使在构造器之前没有使用 static 关键字。因此，使用 new 操作符创建类的新对象也会被当作对类的静态成员的引用。
7.Java 程序在它开始运行之前并非被完全加载，其各个部分是在必需时才加载的。类加载器首先检查这个类的 Class 对象是否已经加载。如果尚未加载，默
认的类加载器就会根据类名查找 .class 文件。
8.Java 还提供了另一种方法来生成对象的 Class 对象的引用，即类字面常量。就像下面这样：
    Test.class;
这样做不仅更简单么热情更安全，因为它在编译时就会受到检查。
9.为了使用类用而做的准备工作实际包含以下三个步骤：
 - 加载，这是由类加载器执行的。该步骤将检查字节码，并从这些字节码中创建一个 Class 对象。
 - 链接。在链接阶段将验证类中的字节码，为静态域分配存储空间，并且必要如果必要的话，将解析这个类创建的其他类的所有引用。
 - 初始化。如果该类具有超类，这对其初始化，执行静态初始化器和静态初始化块。
10.判断一个对象是否是某个指定类型的实例，使用 instanceof 关键字即可。或者使用动态的 Class.isInstance(xxx) 也可以。
11.Class 类与 java.lang.reflect 类库一起对反射的概念进行了支持，该类库包含了 Field、Method 以及 Constructor 类。
12.RTTI 与反射的真正的却别只在于，对 RTTI 来说，编译器在编译时打开和检查 .class 文件。（换句话说，我么可以通过"普通"方式调用对象的所有方
法。）而对于反射机制来说，.class 文件在编译时是不可获取的，所以是在运行时打开和检查 .class 文件。
