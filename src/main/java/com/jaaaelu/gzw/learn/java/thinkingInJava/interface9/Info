第九章 接口

1.接口和内部类为我们提供了一种将接口与实现的更加结构化的方法。
2.如果一个类包含一个或多个抽象方法，该类必须被限定为抽象的。
3.由于一个抽象类是不完整的，所以我也无法创建该类的实例对象。
4.如果该抽象类的导出类，也不为抽象方法提供方法定义，那么该导出类也必须是抽象的才行。
5.如果我们创建了一个没有任何抽象方法的抽象类，那么可能是由于为了阻止产生这类的任何对象。
6.interface 关键字使抽象的概念更向前迈进了一步。abstract 关键字原序人们在类中创建以恶搞或多个没有任何定义的方法————提供了接口的部分，但是
没有提供任何相应的具体实现，这些实现是由此类的继承者创建的。interface 这个关键字产生一个完全抽象的类，它根本就没有提供任何具体的实现。接口
只是提供形式，而为提供任何具体实现。
7.一个接口表示："所有实现了该特定接口的类看起来都像这样"。
8.接口不仅帮也帮我们完成向上转型，还能帮我们实现类似多重继承的特性。
9.想要实现接口，需要使用 implements 关键字，它表示："interface 只是它的外貌，但是现在我要声明它是如何工作的"。
10.我们可以选择在接口中显式的将方法声明为 public 的，但及时你不这么做，它们也是 public 的。并且无法修改为其他访问权限。
11.如果用默认访问修饰符修饰抽象类的 abstract 方法，可能导致继承上出现问题，包外的导出类永远没法对该方法进行实现，除非修改访问权限或者只能将
导出类也声明称 abstract。
12.接口中域，默认是 static 与 final 修饰的。也自动是 public 的。无法使用其他修饰符修饰。接口中的域不是接口的一部分，它们的值被存储在该接
口的静态存储区域内。
13.接口不仅仅是一种更纯粹的抽象类，它的目标比这更高。你可以通过组合多个接口，实现类似多重继承的效果。
14.使用接口的原因：
 - 核心原因：为了能够向上转型为多个基类型（以及由此而带来的灵活性）。
 - 次要原因：与抽象类一致，防止别人创建该类的对象，并确保这仅仅是建立一个接口。
15.如果要创建一个不带任何方法定义和成员变量的基类，那么就应该选择接口而不是抽象类。
16.接口与接口之间可以继承。通过继承，可以很容易的在接口中添加新的方法声明，还可以通过继承在新街口中组合数个接口。而且在接口的继承中，可以同时
继承多个接口。
17.一般情况下，只可以将 extends 用于单一类，但是可以引用多个基类接口。
18.接口的一种常见用法就是策略模式设计，此时你编写一个执行某些操作的方法，而该方法将接受一个同样是你指定的接口。你的主要就是要声明："你可以用
任何你想要的对象来调用我的方法，只要你的对象遵循我的接口"。
18.接口可以嵌套在类或其他接口中。
19.接口中的所有元素都必须是 public 的，所以接口中嵌套接口是不允许声明成 private 的，但是类中嵌套接口是可以声明 private 接口的。
20.任何抽象性都应该是应真正的需求而产生的。