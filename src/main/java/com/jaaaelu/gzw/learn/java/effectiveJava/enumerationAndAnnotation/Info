第六章 枚举和注解

1.第三十条：用 enum 替代 int 常量。

枚举类型是指由一组固定的常量组成的合法值的类型，例如一年中的季节、太阳系的行星或者一副牌中的花色。

Java 枚举类型背后的基本想法非常简单：它们就是通过公有的静态 final 域为每个枚举常量导出实例的类。它们是单例的泛型化，本质上是单元素的枚举。

枚举提供了编译时的类型安全。

除了完善了 int 静态常量模式的不足之外，枚举类型还允许添加任意的方法和域，并实现任意的接口。它们提供了所有 Object 方法的高级实现，实现了
Comparable 和 Serializable 接口，并针对枚举类型的可任意改变性设计了序列化方式。

为了将数据与枚举常量关联起来，得声明实例域，并编写一个带有数据并将数据保存在域中的构造器。枚举天生不可变的，因此所有域都应该声明成 final 的。

我们可以在枚举类型中声明一个抽象方法，并在特定于常量的类主题中，用具体的方法来覆盖每个常量的对应抽象方法。这种方法被称作特定于常量的方法实现。

与 int 常量相比，枚举有个小小的性能缺点，即装载和初始化枚举时会有空间和时间的成本。



2.第三十一条：用实例域代替序数。

永远不要根据枚举的序数导出与它关联的值，而是要将它保存在一个实例域中。



3.第三十二条：用 EnumSet 代替位域。

整个 EnumSet 就是用单个 long 表示，因此它的性能比得上位域的性能。



4.第三十三条：用 EnumMap 代替序数索引。

集 Map 的丰富功能和类型安全与数组的快速于一身。

应用程序的程序员在一般情况下都不使用 Enum.ordinal。



5.第三十四条：用接口模拟可伸缩的枚举。

枚举可以实现接口。
枚举无法继承类。

虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型，对它进行模拟。



6.第三十五条：注解优于命名模式。

Java 1.5 发行版本之前，一般使用命名模式表明有些程序元素需要通过某种工具或者框架进行特殊处理。
例如，JUnit 测试框架原本要求它的用户一定要用 test 作为测试方法名称的开头。

既然有了注解，就完全没有理由再使用命名模式了。



7.第三十六条：坚持使用 Override 注解。

应该在你想覆盖超类声明的每个方法声明中使用 Override 注解。



8.第三十七条：用标记接口定义类型。

标记接口是没有包含方法声明的接口，而只是指明（"或者标明"）一个类实现了具体某种属性的接口。

如果想要定义一个任何新方法都不会与之关联的类型，标记接口就是最好的选择，如果想要标记程序元素而非类和接口，考虑未来可能要给标记添加更多的信息，
或者标记要适合于已经广泛使用了注解类型的框架，那么标记注解就是正确的选择。