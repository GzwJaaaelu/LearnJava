第一章 对象导论

1.所有编程语言都提供抽象机制。
2.面向对象程序设计方式：
 - 万物皆为对象。理论上讲，你可以抽取待求解问题的任何概念化构件（狗、建筑物、服务等），将其表示为程序中的对象。
 - 程序是对象的合计，它们通过发消息来告知彼此所要做的。可以把消息想象为对某个特定对象的方法的调用请求。
 - 每个对象都有自己的由其他对象所构成的存储。换句话说，可以通过创建包含现有对象的包的方式来创建新类型的对象。
 - 每个对象都用其类型。“每个对象都是某个类的一个实例”，这里“类”就是“类型”的同义词。每个类最重要的区别于其他类的特性
 就是“可以发送什么消息给它”。
 - 某一个特定类型的所有对象都可以接受同样的消息。“圆形”类型的对象同时也是“几何形”（继承或实现），所以一个“圆形”对象
 必定能够接受发送给“几何形”对象的消息。这意味着可以编写与“几何形”交互并自动处理所有与几何形性质相关的事物的代码。这种
 可替代性是 OOP 最强有力的概念之一。
3.每个对象都只能满足某些请求，这些请求由对象的接口所决定。接口确定了对某一特定对象所能发出的请求。但是，在程序中必须有满
足这些请求的代码。这些代码与隐藏的数据一起构成了实现。
4.当正在试图开发或理解一个程序设计时，最好的方法之一就是将对象想象为“服务提供者”。你的目标就是去创建（或者最好是在现有
的代码库中寻找）能够提供离线的服务来解决问题的一系列对象。
5.高内聚是软件设计的基本质量要求之一：这意味着一个软件构件（例如一个对象，当然它也有可能指一个方法或一个对象库）的各个方
面“组合”的很好。
6.人们在设计对象时所面临的一个问题是，将过多的功能都塞在一个对象中。在良好的面向对象设计中，每个对象都可以很好的完成一项
任务，但是它并不试图做更多的事。
7.被隐藏的通常代表对象内部脆弱的部分，它们很容易被出行的或不知内情的客户端程序员（类使用者）所毁坏，因此将实现隐藏起来可
以减少程序的 bug。
8.控制访问的两个原因：
 - 让客户端程序员无法触及它们不应该触及的部分——这些部分对数据类型的内部操作来说是必需的，但并不是用户解决特定问题所需的
 接口的一部分。
 - 允许库设计者可以改变类内部的工作方式而不用担心会影响到客户端程序员。
9.产生一个可复用的对象设计需要丰富的经验和敏锐的洞察力。最简单的复用某个类的方式就是直接创建一个该类的对象，此外也可以将
那个类的一个对象置于某个新的类中。使用现有类合成新的类，这种概念成为组合。组合带来了极大的灵活性。
10.继承使用基类型和导出类型的概念表示这种类型之间的相似性。一个基类型包含其所有导出类型所共享的特性和行为。可以创建一个基
类型类表示系统中某些对象的核心概念，从基类型中导出其他类型，来表示此核心可以被实现的各种不同方式。
11.有两种方法可以使基类与导出类产生差异：
 - 直接在到此类中添加新的方法。这些新的方法并不是基类接口的一部分。
 - 改变现有基类的方法的行为，这种被称为覆盖那个方法。
12.在处理类型的层次结构时，经常想把一个对象不当做它所属的特定类型来对待，而是将其当做其基类的对象来对待。这使得人们可以编
写处不依赖于特定类型的代码。
13.单继承结构保证所有对象都某些功能。因此你知道，在你的系统中你可以在每个对象上执行某些基本操作。至少 Java 中大家都至少继
承了 Object 类。
14.异常提供了一种从错误状况下进行可靠恢复的途径。