第六章 访问权限控制

1.重构即重写代码，以使得它更可读、更易理解，并因此而更具可维护性。
2.如何把变动的事物与保持不变的事物区分开来。
如：类库的开发者必须有权进行修改和改进，并确保客户端代码不会因为这些改动而受到影响。
3.访问权限控制的等级，从最大权限到最小权限依次为：public、protected、包访问权限（没有关键字）和 private。
4.包内包含有一组类，它们在单一的名字空间下被组织在了一起。
5.由于名字之间的潜在冲突（你定义的 Stack 类和我定义的 Stack 类），在 Java 中对名称空间进行完全控制并为每个类创建一个唯一的标示符组合就
成为了非常重要的事情（所以我们相同名字的类是通过包名来区分的，而相同方法名是通过类名来区分的）。
6.为什么大部分项目包的命名方式会是 com.xxx.xxx 呢？
答：在以前为了保证包名唯一的一种方法就是使用自己的域名，然后将域名反序即可，比如 com.jaaaelu.xxx。
7.如果不提供任何访问权限修饰词，则意味着它是"包访问权限"。也就意味着，当前包中的所有类对那个成员都有访问权限，但对于这个包之外的所有类，
这个成员确实 private。
8.使该成员成为 public。于是，无论是谁，无论在哪里，都可以访问该成员。
9.protected，在同一包内可以提供访问，当然，如果是不通过包，可以通过继承的方式访问，不过继承的话，只能访问父类 public 和 protected 修饰
的成员。
10.缺省的话就是只有同一包内可以访问。
11.private，意味着只有在这个文件内可以被访问到，一个很常见的用途，构造私有之后，外部无法实例化该类的对象。
12.访问权限的控制常被成为是具体实现的隐藏。把数据和方法包装进类中，以具体实现的隐藏，常被称作是封装。
13.class 的权限修饰符只能是包访问权限或 public，不能使用 private 或 protected 来修饰类(内部类可以)。
14.控制对成员的访问权限有两个原因：
 - 为了使用户不要碰触到那些它们不该碰触的部分，这些部分对于类内部操作是必要的，但是它并不属于客户端程序员所需借口的一部分。
 - 为了让类库的设计者可以更改类的内部工作方式，而不必担心这样会对客户端程序员产生重大的影响。