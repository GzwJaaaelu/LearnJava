第三章 操作符

1.在最底层，Java 中的数据是通过使用操作符来操作的。
2.操作符接受一个或多个参数，并生成一个新值。
3.如果 String + 后面紧跟着一个非 String 类型，那么会尝试将其转为 String，然后进行拼接。
4.赋值操作：取右边的值，把它复制给左边。如：
    int a = 0;
对基本类型复制是很简单的。基本类型存储了实际的数值，而并非指向一个对象的引用。所以在其赋值得时候，是直接将一个地方的内容
复制到了另一个地方。例如，a = b; 这时候如果修改了 a，b 的值不会受影响。
但是在位对象“赋值”的时候，情况却发生了变化。对一个对象进行操作时，我们真正操作的是对对象的引用。所以倘若“将一个对象赋
值给另一个对象”，实际是将“引用”从一个地方赋值到另一个地方。例如，c = d; 那么 c 和 d 都指向原本只有 d 指向的那个对象。
5.赋值运算符：= -> 赋值。
6.算术运算符：+、-、*、/、% -> 加、减、乘、除、取余。
7.自动递增和递减：++、-- -> 自动加一，自动减一。
8.对于前缀递增或前缀递减（如 ++a 或 --a），会先执行运算，再生成值。而对于后缀递增或后缀递减（如 a++ 或 a--），会先生成值，
再执行计算。
9.关系运算符：>、<、>=、<=、==、!= -> 大于、小于、大于等于、小于等于、等于、不等于。关系运算符返回的是 boolean 类型的值。
10.但是尽管对象的内容不同，然而对象的引用确实不同的，而 == 和 != 比较是对象的引用（如果是对象之间相比较）。我们可以通过重
写对象的 equals() 来比较对象的内容，不过 equals() 默认比较的是引用。
11.逻辑操作符：&&、||、! -> 与、或、非。只可应用于布尔值。
12.短路：例如：test1() && test2() && test3()，如果 test1() 返回 true,test2() 返回 false，那么就意味着整个表达式肯定为 false，
所以必要继续执行剩余的表达式，那样只是浪费。事实上，如果所有的逻辑表达式都有一部分不必表达，那么将获得潜在的性能提升。
13.指数：2e2f = 2 * 10 * 10 = 200。
14.按位运算（对直接进行操作，即二进制）：
 - &：与，如过两个输入位都是 1，则输出 1，否则输出 0。
 - |：或，只有两个输入位都是 0，才会输出 0，否则输出 1。
 - ^：异或，输入位的某一个是 1，但不全都是 1，那么就生成 1。
 - ~：非，按位取反，0 变 1，1 变 0。
15.移位操作符：
 - <<，左移符号。
 - >>，右移符号。
 - >>>，无符号右移符号。
16.三目运算符：boolean-exp ? value0 : value1;如果 boolean-exp（布尔表达式）结果为 true，就计算 value0 的值，并作为最终结
果反之，就计算 value1 的值作为最终结果。当然这个可以用 if-else 代替，不过三目运算符更加简洁。
17.类型转换：
 - 窄化转换的操作（建能容纳更多信息的数据类型转换成无法容纳那么多信息的类型），需要进行显式转换（强转）。
 - 扩展转化，不必显式进行类型转换，因为新类型肯定能容纳原来类型的信息，不会造成任何信息丢失。

