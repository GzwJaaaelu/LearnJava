第十二章 通过异常处理错误

1.为什么要有异常处理机制？
 - 发现错误的最佳时机是编译阶段，也就是你试图运行程序之前。然而，编译器并不能找出所有的错误，余下的问题必须在运行期间坚决。这就需要错误源能通
 过某种方式，把适当的信息传递给某个接收者————该接收者知道如何正确处理这个问题。
 - 可以把"描述正常执行过程中做什么事"的代码和"出了问题怎么办"的代码相分离。
2.事务是计算中的合同法，如果出了什么问题，我们只需要放弃整个计算。
3.异常最重要的方面之一就是如果发生问题，它们将不允许程序沿着正常的路径继续走下去。
4.所有标准异常都有两个构造器：一个是默认构造器；另一个是接受字符串作为参数，以便我们能把相关信息放入异常对象的构造器。
5.如果在方法内部抛出了异常（或是在方法内部调用的其他方法抛出了异常），这个方法将在抛出异常的过程中结束。要是不希望方法就此结束，可以在方法内
设置一个特殊的块来捕获异常。也就是 try {} 代码块中。
6.当然，抛出的异常必须在某处得到处理。否则程序就终止了。这个"地点"就是异常处理程序。也就是 catch {} 代码块中。
7.Throwable 对象可分为两种类型：
 - Error：用来表示编译时和系统错误。
 - Exception：是可以被抛出的类型。
8.RunTimeException 代表是编程错误：
 - 无法预料的错误。
 - 作为程序员，应该在代码中进行检查的错误。
9.使用 finally 进行清理。对于一些代码，可能会希望无论 try 块中的异常是否抛出，它们都能执行。这通常适用于内存回首之外的情况。
10.异常存在异常丢失的情况，比如里层 try 抛出了 A 异常，而里层 finally 抛出了 B 异常，那么外层 catch 语句只能捕获到 B 异常。
11.异常使用指南，应该在下列情况下使用异常：
 - 在恰当的级别处理问题。（在知道该如何处理的情况才捕获异常。）
 - 解决问题并且重新调用产生异常的方法。
 - 进行少许修补，然后绕过异常发生的地方继续执行。
 - 用别的数据进行计算，以代替方法预计会返回的值。
 - 把当前运行环境下能做的事情尽量做完，然后把相同的异常重抛到更高层。
 - 把当前运行环境下能做的事情尽量做完，然后把不同的异常抛到更高层。
 - 终止程序。
 - 进行简化。（如果你的异常模式使问题变得太复杂，那用起来会非常痛苦也很烦人。）
 - 让类库和程序更安全。（这既是在为调试做短期投资，也是在为程序的健壮性做长期投资。）