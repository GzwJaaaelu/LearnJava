第二章 创建和销毁对象

1.第一条：考虑用静态工厂方法待日构造器。
提供静态工厂方法而不是公有的构造器，这样做具有几大优势：
 - 静态工厂方法与构造器不同的第一大优势在于，它们有名称。如果构造器的参数本身没有确切的描述正被返回的对象，那么具有适当名称的静态工厂会更容易
 使用。产生的客户端代码也更易于阅读。还有一点，一个类只能又一个带有制定签名的构造器。编程人员如何避开这一限制：通过提供两个构造器，它们的参数
 列表只在参数类型的顺序上有所不同。实际上这并不是好主意，面对这样的 API，用户永远也记不住该用哪个构造器，姐姐常常调用错误的构造器。
 - 静态工厂方法与构造器不同的第二大优势在于，不必在每次调用它们的时候都创建一个新对象。这使得不可变类可以使用预先构建好的实例，或者将构建好的
 实例缓存起来，进行重复利用，从而避免不必要的重复对象。
 - 静态工厂方法与构造器不同的第三大优势在于，它们可以返回原返回类型的任何只类型的对象。
 - 静态工厂方法与构造器不同的第四大优势在于，在创建参数化类型实例的时候，它们使代码变得更加简洁。
静态工厂也有缺点，比如：
 - 类如果不含共有或者受保护的构造器，就不能被子类化。
 - 它们与其他的静态方法实际上没有任何区别。

2.第二条：遇到多个构造器参数时要考虑使用构造器。
静态工厂和构造器有个共同的局限性：它们都不能很好的扩展到大量的可选参数。
这种情况下，我们更常见的方式先写一个包含所有可选参数构造器，然后通过构造器调用构造器的方式，并将一些值设置为默认值的方式来做，也叫重叠构造器。
重叠构造器模式可行，但是但有许多参数的时候，客户端代码会很难编写，并且仍然较难以阅读。
遇到多参数构造的时候，还有第二种替代方法，即 JavaBean 模式，在这种模式在，调用一个无参构造器来创建对象，然后调用 setter 方法来设置每个必要
的参数，以及每个相关的可选参数。不过 JavaBean 模式也有自身的不足。
不过还有第三种替代方式，既能保证像重叠构造器那样的安全性，也能保证像 JavaBean 模式那么好的可读性。这就是 Builder 模式。
简而言之，如果累的构造器或静态工厂中具有多个参数，设计这种类时，Builder 模式就种不错的选择，特别是大多数参数都是可选的时候。

3.第三条：用是由构造器或枚举类型强化 Singleton 属性。
Singleton 指仅仅被实例话一次的类。通常被用来代表那些本质上唯一的系统组件。
可以通过改造构造器来防止被反射机制创建更多实例。
为了反序列化时创建一个新的对象，我们必须声明所有实例域都是瞬时（transient）的并且提供一个 readResolve()。
枚举也是一个不错的选择，更简洁，并且无偿提供了序列化机制，绝对防止多次实例话，而且还能抵挡反射攻击。

4.第四条：通过是由构造器强化不可实例化的能力。
有时候，你可能需要编写只包含静态方法和静态域的类，尽管这些类的名声很不好。不过这样的工具类你希望被实例话，实例对它们没有人格意义。企图通过将
类做成呈现类来强制该类不可被实例化是行不通的，因为该类可以被子类化，并且该子类可以背实例化。这样做甚至会误导用户，一位这种类是专门为了继承而
设计的。
这时候我们需要主动为其添加了私有构造器。

5.第五条：避免不必要的对象。
一般来说，最好能从用对象而不是每次需要的时候就创建一个相同功能的新对象。
如果对象是不可变的，它就是中可以被重用。
例如，String 应该直接使用，而不是使用 String 的构造器去创建字符串。
除了重用不可变的对象之外，也可以重用那些已知不会被修改的可变对象。
要优先使用基本类型而不是装箱基本类型，要当心无意识的装箱。

6.第六条：消除过期的对象引用。
所谓的过期引用，是指永远也不会再被接触的引用。
在支持垃圾回收的语言中，内存泄漏是很隐蔽的。如果一个对象引用被无意识的保留起来了，那么，垃圾回收机制不仅不会处理这对象，而且也不会处理被这个
对象所引用的所有其他对象。
一般而言，只要类是自己管理内存，程序员就应该警惕内存泄漏的问题。
内存泄漏的另一个常见来源是缓存，所以最好使用 WeakHashMap 之类的类来管理缓存，避免自己遗忘。
内存泄漏的第三个常见来源是监听器和其他回调。

7.第七条：避免使用终结方法。
终结方法（finalizer）通常是不可预测的，也是很危险的，一般情况下是不必要的。
终结方法的缺点在于不能保证被及时的执行。从一个对象变得不可到达开始到它的终结方法被执行，所花费的这段时间是任意长的。
使用终结方法又一个非常严重的性能损失。
显式的终止方法通常与 try-finally 结构结合起来使用，以确保及时终止。
