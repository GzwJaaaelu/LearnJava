第七章 方法

1.第三十八条：检查参数的有效性。

绝大多数方法和构造器对于传递给它们的参数值都会有某些限制。
例如，索引值必须是非负数，对象引用不能为 null，等等，这些都是很常见的，

如果传递了无效的参数值给方法，这个方法在执行之前先对参数进行了检查，那么它很快就会失败，并且清楚的出现适当的异常。
如果这个方法没有检查的参数，就有可能发生几种情况：
 - 该方法可能在处理过程中失败，并且产生令人费解的异常；
 - 该方法可以正常返回，但是会悄悄的计算出错误的结果；
 - 该方法可以正常返回，但是却使得某个对象处于被破坏的状态，将来在某个不确定的时候，在某个不相关的点上引发错误。

对于有些参数，方法本身没有用到，却被保存起来供以后使用，检验这类参数的有效性尤为重要。
构造器就是典型。

假如方法对于它能接受的所有参数值都能够完成合理的工作，那么对参数的限制就应该越少越好。

简而言之，每当编写方法或者构造器的时候，应该考虑它的参数有哪些限制。应该把这些限制写到文档中，并且在这个方法体的开头处，通过显式的检查实施这
些限制。



2.第三十九条：必要时进行保护性拷贝。

假设类的客户端会尽其所能来破坏这类的约束条件，因此你必须保护性的设计程序。
编写一些面对客户的不良行为仍能保持健壮性的类，这是非常值得投入时间去做的事情。

对于构造器的每个可变参数进行保护性拷贝是必要的。
保护性拷贝是在检查参数的有效性之前进行的，并且有效性检查是针对拷贝之后的对象，而不是针对原始的对象。

使方法返回可变内部域的保护性拷贝。



3.第四十条：谨慎设计方法签名。

以下这些设计技巧将有助于使你的 API 更容易学习和使用，你并且比较不容易出错：
 - 谨慎的选择方法的名称；
 - 不要过于追求提供便利的方法；
 - 避免过长的参数列表；

有三种方法可以缩短过长的参数列表：
 - 把方法分解成多个方法，每个方法只需要这些参数的一个子集；
 - 创建辅助类，用来保存参数的分组；
 - 从对象构建到方法调用都采用 Builder 模式；

对于参数类型，要优先使用接口而不是类。

对于 boolean 参数，要优先使用两个元素的枚举类型。



4.第四十一条：慎用重载。

要调用哪个重载方法实在编译时做出决定的。

对于重载方法的选择是静态的，而对于被覆盖的方法的选择则是动态的。

安全而保守的策略是，永远不要导出两个具有相同参数数目的重载方法。



5.第四十二条：慎用可变参数。

可变参数机制通过先创建一个数组，数组的大小为在调用位置说传递的参数数量，然后将参数值传到数组中，最后将数组传递给方法。

在重视性能的情况下， 使用可变参数机制要特别小心，可变参数方法的每次调用都会导致进行一次数组分配和初始化。

我们可以使用这种方法：
    public void foo() {}
    public void foo(int a1) {}
    public void foo(int a1, int a2) {}
    public void foo(int a1, int a2, int a3) {}
    public void foo(int a1, int a2, int a3, int...rest) {}



6.第四十三条：返回令长度的数组或者集合，而不是 null。

如果返回 null，这样做会要求客户端中必须有额外的外码来处理 null 返回值。

简而言之，返回类型为数组或集合的方法没理由返回 null，而不是返回一个令长度的数组或者集合。



7.第四十四条：为所有导出的 API 元素编写文档注释。

如果想要使一个 API 真正可用，就必须为期编写文档。

为了正确的编写 API 文档，必须在每个被导出的类、接口、构造器、方法和域声明之前增加一个文档注释。

方法的文档注释应该间接的描述出它和客户端之间的约定。
除了专门为继承设计的类中的方法之外，这个约定应该说明这个方法做了什么，而不是说明它是如何完成这项工作的。

文档注释应该列举出这个方法的所有前提条件和后置条件，所谓前提条件是指为了使客户端能够调用这个方法，而必须要满足的条件；所谓后置条件是指在调用
成功完成之后，哪些条件必须要满足。
除了前提条件和后置条件之外，每个方法还应该在文档中描述它的副作用，所谓副作用就是指系统状态中可以观察到的变化，它不是为了获得后置条件而明确要
求的变化。

同一个类或者接口中的两个成员或者构造器，不应该具有同样的概要描述。

对于类、接口和域，概要米哦阿树应该是一个名词短语，它描述了该类或者该接口实例，或者域本身所代表的事物。

为泛型或者方法编写文档时，确保要在文档中说明所有的类型参数。
为枚举类型编写文档时，要确保在文档中说明常量，以及类型，还有任何公有的方法。
为注解类型编写文档是，要确保在文档中说明所有成员，以及类型本身。

类的导出 API 有两个特征经常被人忽视，即线程安全和可序列化。

对于由多个互相关联的类组成的复杂 API，通常有必要要用一个外部文档来描述该 API 的总体结构，对文档注释进行补充。






